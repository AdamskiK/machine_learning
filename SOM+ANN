# Part 1
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
dataset = pd.read_csv('Credit_Card_Applications.csv')
X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values

from sklearn.preprocessing import MinMaxScaler
sc = MinMaxScaler(feature_range = (0,1))
X = sc.fit_transform(X)

# Checking duplicates in CustomerID column
tab = []
for i in range(len(dataset)):
    if dataset.iloc[i,0] not in tab:
        tab.append(dataset.iloc[i,0])
    else:
        print('Duplicates'+str(dataset.iloc[i,0]))
        
# CustomerID has no sense to take care of it, but later it will be needed to identify potencial cheaters

# Import MiniSom
from minisom import MiniSom
som = MiniSom(x=25, y=25, input_len= 15, sigma= 1.0, learning_rate= 0.5)
som.random_weights_init(X)
som.train_random(data= X, num_iteration= 100)

from pylab import bone, pcolor, colorbar, plot, show
bone()
pcolor(som.distance_map().T) # Need to transpose along with MATBLAB convention - reversed axes
colorbar()
markers = ['o', 's']
colors = ['r', 'g']
for i, x in enumerate(X):
    w = som.winner(x)
    plot(w[0]+0.5,
         w[1]+0.5,
         markers[y[i]],
         markeredgecolor = colors[y[i]],
         markerfacecolor = 'None',
         markersize = 10,
         markeredgewidth = 2)
show()

# Finding Frauds
mappings = som.win_map(X)
frauds = np.concatenate((mappings[(1,22)], mappings[(10,13)], 
                                  mappings[(11,12)], mappings[(23,5)], 
                                  mappings[(20,16)]), axis= 0)
frauds = sc.inverse_transform(frauds)


# Part 2 - From Unsupervising to Supervising Deep Learning

# Creating the matrix of features
customers = dataset.iloc[:, 1:].values

# Creating the dependent variable
is_fraud = np.zeros(len(dataset))
for i in range(len(dataset)):
    if dataset.iloc[i,0] in frauds:
        is_fraud[i] = 1
        

# Building ANN
        
# Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
customers = sc.fit_transform(customers)

# Part 2 - Now let's make the ANN!

# Importing the Keras libraries and packages
import keras
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout

# Initialising the ANN
classifier = Sequential()

# Adding the input layer and the first hidden layer
classifier.add(Dense(units = 2, kernel_initializer = 'uniform', activation = 'relu', input_dim = 15))
classifier.add(Dropout(rate = 0.1))
# Adding the output layer
classifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))

# Compiling the ANN
classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

# Fitting the ANN to the Training set
classifier.fit(customers, is_fraud, batch_size = 1, epochs = 5)

# Part 3 - Making predictions and evaluating the model

# Predicting the probabilities of frauds
y_pred = classifier.predict(customers)
y_pred = np.concatenate((dataset.iloc[:,0:1].values,y_pred), axis= 1)
y_pred = y_pred[y_pred[:, 1].argsort()]


# Finding probabilities of observations marked as fraud using by SOM
prob = []
for i in range(len(frauds)):
    for j in range(len(y_pred)):
        if frauds[i,0] == y_pred[j,0]:
            prob.append(y_pred[j,1])
            
prob = np.concatenate((frauds[:,0:1],np.array(prob)[:, np.newaxis]), axis = 1)
sorted_prob = prob[prob[:,1].argsort()]
